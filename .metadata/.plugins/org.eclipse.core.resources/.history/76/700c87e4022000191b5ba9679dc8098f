/**
 */
package baciCodeGen.baciTypeModel.impl;

import baciCodeGen.BaciCodeGenPackage;

import baciCodeGen.baciTypeModel.AccessType;
import baciCodeGen.baciTypeModel.BaciType;
import baciCodeGen.baciTypeModel.BaciTypeModelFactory;
import baciCodeGen.baciTypeModel.BaciTypeModelPackage;
import baciCodeGen.baciTypeModel.BasicType;
import baciCodeGen.baciTypeModel.SeqType;

import baciCodeGen.impl.BaciCodeGenPackageImpl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BaciTypeModelPackageImpl extends EPackageImpl implements BaciTypeModelPackage {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass baciTypeEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EEnum accessTypeEEnum = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EEnum basicTypeEEnum = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EEnum seqTypeEEnum = null;

	/**
	 * Creates an instance of the model <b>Package</b>, registered with
	 * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
	 * package URI value.
	 * <p>Note: the correct way to create the package is via the static
	 * factory method {@link #init init()}, which also performs
	 * initialization of the package, or returns the registered package,
	 * if one already exists.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see org.eclipse.emf.ecore.EPackage.Registry
	 * @see baciCodeGen.baciTypeModel.BaciTypeModelPackage#eNS_URI
	 * @see #init()
	 * @generated
	 */
	private BaciTypeModelPackageImpl() {
		super(eNS_URI, BaciTypeModelFactory.eINSTANCE);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static boolean isInited = false;

	/**
	 * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
	 * 
	 * <p>This method is used to initialize {@link BaciTypeModelPackage#eINSTANCE} when that field is accessed.
	 * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #eNS_URI
	 * @see #createPackageContents()
	 * @see #initializePackageContents()
	 * @generated
	 */
	public static BaciTypeModelPackage init() {
		if (isInited) return (BaciTypeModelPackage)EPackage.Registry.INSTANCE.getEPackage(BaciTypeModelPackage.eNS_URI);

		// Obtain or create and register package
		BaciTypeModelPackageImpl theBaciTypeModelPackage = (BaciTypeModelPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof BaciTypeModelPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new BaciTypeModelPackageImpl());

		isInited = true;

		// Obtain or create and register interdependencies
		BaciCodeGenPackageImpl theBaciCodeGenPackage = (BaciCodeGenPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(BaciCodeGenPackage.eNS_URI) instanceof BaciCodeGenPackageImpl ? EPackage.Registry.INSTANCE.getEPackage(BaciCodeGenPackage.eNS_URI) : BaciCodeGenPackage.eINSTANCE);

		// Create package meta-data objects
		theBaciTypeModelPackage.createPackageContents();
		theBaciCodeGenPackage.createPackageContents();

		// Initialize created meta-data
		theBaciTypeModelPackage.initializePackageContents();
		theBaciCodeGenPackage.initializePackageContents();

		// Mark meta-data to indicate it can't be changed
		theBaciTypeModelPackage.freeze();

  
		// Update the registry and return the package
		EPackage.Registry.INSTANCE.put(BaciTypeModelPackage.eNS_URI, theBaciTypeModelPackage);
		return theBaciTypeModelPackage;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getBaciType() {
		return baciTypeEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EAttribute getBaciType_AccessType() {
		return (EAttribute)baciTypeEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EEnum getAccessType() {
		return accessTypeEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EEnum getBasicType() {
		return basicTypeEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EEnum getSeqType() {
		return seqTypeEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BaciTypeModelFactory getBaciTypeModelFactory() {
		return (BaciTypeModelFactory)getEFactoryInstance();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean isCreated = false;

	/**
	 * Creates the meta-model objects for the package.  This method is
	 * guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createPackageContents() {
		if (isCreated) return;
		isCreated = true;

		// Create classes and their features
		baciTypeEClass = createEClass(BACI_TYPE);
		createEAttribute(baciTypeEClass, BACI_TYPE__ACCESS_TYPE);

		// Create enums
		accessTypeEEnum = createEEnum(ACCESS_TYPE);
		basicTypeEEnum = createEEnum(BASIC_TYPE);
		seqTypeEEnum = createEEnum(SEQ_TYPE);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean isInitialized = false;

	/**
	 * Complete the initialization of the package and its meta-model.  This
	 * method is guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializePackageContents() {
		if (isInitialized) return;
		isInitialized = true;

		// Initialize package
		setName(eNAME);
		setNsPrefix(eNS_PREFIX);
		setNsURI(eNS_URI);

		// Create type parameters

		// Set bounds for type parameters

		// Add supertypes to classes

		// Initialize classes, features, and operations; add parameters
		initEClass(baciTypeEClass, BaciType.class, "BaciType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getBaciType_AccessType(), this.getAccessType(), "accessType", null, 0, 1, BaciType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		// Initialize enums and add enum literals
		initEEnum(accessTypeEEnum, AccessType.class, "AccessType");
		addEEnumLiteral(accessTypeEEnum, AccessType.RO);
		addEEnumLiteral(accessTypeEEnum, AccessType.RW);

		initEEnum(basicTypeEEnum, BasicType.class, "BasicType");
		addEEnumLiteral(basicTypeEEnum, BasicType.BOOLEAN);
		addEEnumLiteral(basicTypeEEnum, BasicType.DOUBLE);
		addEEnumLiteral(basicTypeEEnum, BasicType.FLOAT);
		addEEnumLiteral(basicTypeEEnum, BasicType.LONG);
		addEEnumLiteral(basicTypeEEnum, BasicType.LONG_LONG);
		addEEnumLiteral(basicTypeEEnum, BasicType.ULONG);
		addEEnumLiteral(basicTypeEEnum, BasicType.ULONG_LONG);
		addEEnumLiteral(basicTypeEEnum, BasicType.PATTERN);
		addEEnumLiteral(basicTypeEEnum, BasicType.STRING);

		initEEnum(seqTypeEEnum, SeqType.class, "SeqType");
		addEEnumLiteral(seqTypeEEnum, SeqType.NOT_SEQ);
		addEEnumLiteral(seqTypeEEnum, SeqType.SEQ);
	}

} //BaciTypeModelPackageImpl
