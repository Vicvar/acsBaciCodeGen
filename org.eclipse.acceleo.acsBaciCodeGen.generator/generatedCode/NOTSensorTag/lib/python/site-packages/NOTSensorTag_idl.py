# Python stubs generated by omniidl from /home/vvaras/neon_acceleo_codeGenSummerJob/org.eclipse.acceleo.acsBaciCodeGen.generator/generatedCode/NOTSensorTag/src/../idl/NOTSensorTag.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")

# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")

# #include "baciErrTypeProperty.idl"
import baciErrTypeProperty_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_baciErrTypeProperty = omniORB.openModule("baciErrTypeProperty")
_0_baciErrTypeProperty__POA = omniORB.openModule("baciErrTypeProperty__POA")

# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "Sensors"
#
__name__ = "Sensors"
_0_Sensors = omniORB.openModule("Sensors", r"/home/vvaras/neon_acceleo_codeGenSummerJob/org.eclipse.acceleo.acsBaciCodeGen.generator/generatedCode/NOTSensorTag/src/../idl/NOTSensorTag.idl")
_0_Sensors__POA = omniORB.openModule("Sensors__POA", r"/home/vvaras/neon_acceleo_codeGenSummerJob/org.eclipse.acceleo.acsBaciCodeGen.generator/generatedCode/NOTSensorTag/src/../idl/NOTSensorTag.idl")


# interface NOTSensorTag
_0_Sensors._d_NOTSensorTag = (omniORB.tcInternal.tv_objref, "IDL:alma/Sensors/NOTSensorTag:1.0", "NOTSensorTag")
omniORB.typeMapping["IDL:alma/Sensors/NOTSensorTag:1.0"] = _0_Sensors._d_NOTSensorTag
_0_Sensors.NOTSensorTag = omniORB.newEmptyClass()
class NOTSensorTag (_0_ACS.CharacteristicComponent):
    _NP_RepositoryId = _0_Sensors._d_NOTSensorTag[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Sensors.NOTSensorTag = NOTSensorTag
_0_Sensors._tc_NOTSensorTag = omniORB.tcInternal.createTypeCode(_0_Sensors._d_NOTSensorTag)
omniORB.registerType(NOTSensorTag._NP_RepositoryId, _0_Sensors._d_NOTSensorTag, _0_Sensors._tc_NOTSensorTag)

# NOTSensorTag operations and attributes
NOTSensorTag._d__get_temperature = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
NOTSensorTag._d__get_humidity = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
NOTSensorTag._d__get_light = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
NOTSensorTag._d_on = ((), (), None)
NOTSensorTag._d_off = ((), (), None)
NOTSensorTag._d_publishTemperature = ((), (), None)
NOTSensorTag._d_publishLight = ((), (), None)
NOTSensorTag._d_publishHumidity = ((), (), None)

# NOTSensorTag object reference
class _objref_NOTSensorTag (_0_ACS._objref_CharacteristicComponent):
    _NP_RepositoryId = NOTSensorTag._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_CharacteristicComponent.__init__(self, obj)

    def _get_temperature(self, *args):
        return self._obj.invoke("_get_temperature", _0_Sensors.NOTSensorTag._d__get_temperature, args)

    temperature = property(_get_temperature)


    def _get_humidity(self, *args):
        return self._obj.invoke("_get_humidity", _0_Sensors.NOTSensorTag._d__get_humidity, args)

    humidity = property(_get_humidity)


    def _get_light(self, *args):
        return self._obj.invoke("_get_light", _0_Sensors.NOTSensorTag._d__get_light, args)

    light = property(_get_light)


    def on(self, *args):
        return self._obj.invoke("on", _0_Sensors.NOTSensorTag._d_on, args)

    def off(self, *args):
        return self._obj.invoke("off", _0_Sensors.NOTSensorTag._d_off, args)

    def publishTemperature(self, *args):
        return self._obj.invoke("publishTemperature", _0_Sensors.NOTSensorTag._d_publishTemperature, args)

    def publishLight(self, *args):
        return self._obj.invoke("publishLight", _0_Sensors.NOTSensorTag._d_publishLight, args)

    def publishHumidity(self, *args):
        return self._obj.invoke("publishHumidity", _0_Sensors.NOTSensorTag._d_publishHumidity, args)

omniORB.registerObjref(NOTSensorTag._NP_RepositoryId, _objref_NOTSensorTag)
_0_Sensors._objref_NOTSensorTag = _objref_NOTSensorTag
del NOTSensorTag, _objref_NOTSensorTag

# NOTSensorTag skeleton
__name__ = "Sensors__POA"
class NOTSensorTag (_0_ACS__POA.CharacteristicComponent):
    _NP_RepositoryId = _0_Sensors.NOTSensorTag._NP_RepositoryId


    _omni_op_d = {"_get_temperature": _0_Sensors.NOTSensorTag._d__get_temperature, "_get_humidity": _0_Sensors.NOTSensorTag._d__get_humidity, "_get_light": _0_Sensors.NOTSensorTag._d__get_light, "on": _0_Sensors.NOTSensorTag._d_on, "off": _0_Sensors.NOTSensorTag._d_off, "publishTemperature": _0_Sensors.NOTSensorTag._d_publishTemperature, "publishLight": _0_Sensors.NOTSensorTag._d_publishLight, "publishHumidity": _0_Sensors.NOTSensorTag._d_publishHumidity}
    _omni_op_d.update(_0_ACS__POA.CharacteristicComponent._omni_op_d)

NOTSensorTag._omni_skeleton = NOTSensorTag
_0_Sensors__POA.NOTSensorTag = NOTSensorTag
omniORB.registerSkeleton(NOTSensorTag._NP_RepositoryId, NOTSensorTag)
del NOTSensorTag
__name__ = "Sensors"

#
# End of module "Sensors"
#
__name__ = "NOTSensorTag_idl"

_exported_modules = ( "Sensors", )

# The end.
