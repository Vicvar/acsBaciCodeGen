# Python stubs generated by omniidl from /home/vvaras/acsBaciCodeGen/org.eclipse.acceleo.acsBaciCodeGen.generator/generatedCode/testComp/src/../idl/testComp.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")

# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")

# #include "baciErrTypeProperty.idl"
import baciErrTypeProperty_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_baciErrTypeProperty = omniORB.openModule("baciErrTypeProperty")
_0_baciErrTypeProperty__POA = omniORB.openModule("baciErrTypeProperty__POA")

# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "TEST"
#
__name__ = "TEST"
_0_TEST = omniORB.openModule("TEST", r"/home/vvaras/acsBaciCodeGen/org.eclipse.acceleo.acsBaciCodeGen.generator/generatedCode/testComp/src/../idl/testComp.idl")
_0_TEST__POA = omniORB.openModule("TEST__POA", r"/home/vvaras/acsBaciCodeGen/org.eclipse.acceleo.acsBaciCodeGen.generator/generatedCode/testComp/src/../idl/testComp.idl")


# interface testComp
_0_TEST._d_testComp = (omniORB.tcInternal.tv_objref, "IDL:TEST/testComp:1.0", "testComp")
omniORB.typeMapping["IDL:TEST/testComp:1.0"] = _0_TEST._d_testComp
_0_TEST.testComp = omniORB.newEmptyClass()
class testComp (_0_ACS.CharacteristicComponent):
    _NP_RepositoryId = _0_TEST._d_testComp[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_TEST.testComp = testComp
_0_TEST._tc_testComp = omniORB.tcInternal.createTypeCode(_0_TEST._d_testComp)
omniORB.registerType(testComp._NP_RepositoryId, _0_TEST._d_testComp, _0_TEST._tc_testComp)

# testComp operations and attributes
testComp._d__get_testProp = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)

# testComp object reference
class _objref_testComp (_0_ACS._objref_CharacteristicComponent):
    _NP_RepositoryId = testComp._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_CharacteristicComponent.__init__(self, obj)

    def _get_testProp(self, *args):
        return self._obj.invoke("_get_testProp", _0_TEST.testComp._d__get_testProp, args)

    testProp = property(_get_testProp)


omniORB.registerObjref(testComp._NP_RepositoryId, _objref_testComp)
_0_TEST._objref_testComp = _objref_testComp
del testComp, _objref_testComp

# testComp skeleton
__name__ = "TEST__POA"
class testComp (_0_ACS__POA.CharacteristicComponent):
    _NP_RepositoryId = _0_TEST.testComp._NP_RepositoryId


    _omni_op_d = {"_get_testProp": _0_TEST.testComp._d__get_testProp}
    _omni_op_d.update(_0_ACS__POA.CharacteristicComponent._omni_op_d)

testComp._omni_skeleton = testComp
_0_TEST__POA.testComp = testComp
omniORB.registerSkeleton(testComp._NP_RepositoryId, testComp)
del testComp
__name__ = "TEST"

#
# End of module "TEST"
#
__name__ = "testComp_idl"

_exported_modules = ( "TEST", )

# The end.
