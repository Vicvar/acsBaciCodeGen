[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore', 'http://vvaras/acsBaciCodeGen/model')]


[template public generateElement(aCharacteristicComponent : CharacteristicComponent)]
[comment @main /]
[testGen()/]
[generateIDL()/]
[generateSchema()/]
[generateObjectConfig()/]
[generateRTConfig()/]
[generateImplHead()/]
[generateImpl()/]
[generateMakefile()/]
[generateREADME()/]
[/template]

[template public testGen(aCharacteristicComponent : CharacteristicComponent)]
[file ('test', false, 'UTF-8')]
	//[protected('test codegen')]
	[for (it : Property | aCharacteristicComponent.properties)]
	[it.name/]= something_[i/];
	[/for]
	//[/protected]
[/file]
[/template]

[template public generateIDL(aCharacteristicComponent : CharacteristicComponent)
	{
		cName : String = aCharacteristicComponent.name;
		cModule : String = aCharacteristicComponent.module;
		cPrefix : String = aCharacteristicComponent.prefix;
	}]

[file (cName+'/idl/'+aCharacteristicComponent.name+'.idl', false, 'UTF-8')]
#ifndef _[cName.toUpperCase()/]_IDL_
#define _[cName.toUpperCase()/]_IDL_

#include <baci.idl>

#pragma prefix "[cPrefix/]"

module [cModule/]
{	
	interface [cName/] : ACS::CharacteristicComponent
	{
		/*Properties*/

		[for (it : Property | self.properties)]
		readonly attribute ACS::[it.baciType.name/] [it.name/];

		[/for]
		/*Actions*/
		[for (it : Action | self.actions)]

		[it.type/] [it.name/]();
		[/for]
	};
};

#endif //_[cName.toUpperCase()/]_IDL_

[/file]

[/template]

[template public generateSchema(aCharacteristicComponent : CharacteristicComponent)
	{
		cName : String = aCharacteristicComponent.name;
	}]
[file (cName+'/config/CDB/schemas/'+cName+'.xsd', false, 'UTF-8')]
<?xml version="1.0" encoding="ISO-8859-1"?>
<xs:schema
	targetNamespace="urn:schemas-cosylab-com:[cName/]:1.0"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns="urn:schemas-cosylab-com:[cName/]:1.0"
	xmlns:cdb="urn:schemas-cosylab-com:CDB:1.0" 
	xmlns:baci="urn:schemas-cosylab-com:BACI:1.0" elementFormDefault="qualified" attributeFormDefault="unqualified">
	
	<xs:import namespace="urn:schemas-cosylab-com:CDB:1.0" schemaLocation="CDB.xsd"/>
	<xs:import namespace="urn:schemas-cosylab-com:BACI:1.0" schemaLocation="BACI.xsd"/>
	
	<xs:complexType name="[cName/]Type">

		<xs:complexContent>

			<xs:extension base="baci:CharacteristicComponent">

				<xs:sequence>
					[for (it : Property | self.properties)]
					<xs:element name="[it.name/]" type="baci:[it.baciType.name/]"/>
					[/for]			
				</xs:sequence>

				[for (it : Attribute | self.attributes)]
				<xs:attribute name="[it.name/]" type="[it.type/]" [if(it.required)]use="required" [/if]/>
				[/for]

			</xs:extension>

		</xs:complexContent>

	</xs:complexType>

	<xs:element name="SensorTag" type="[cName/]Type"/>
</xs:schema>

[/file]
[/template]

[template public generateObjectConfig(aCharacteristicComponent : CharacteristicComponent)
	{
		cName : String = aCharacteristicComponent.name;
		cModule : String = aCharacteristicComponent.module;
		cPrefix :String = aCharacteristicComponent.prefix;
		cContainerName : String = aCharacteristicComponent.container;
	}]
[file (cName+'/test/CDB/MACI/Components/Components.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="ISO-8859-1"?>
<Components  xmlns="urn:schemas-cosylab-com:Components:1.0"
	xmlns:cdb="urn:schemas-cosylab-com:CDB:1.0" 
	xmlns:baci="urn:schemas-cosylab-com:BACI:1.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	[for (Sequence{1..aCharacteristicComponent.componentNumber})]
	<_ Name="[cName/][i/]"
		Code="[cName/]Impl"        
		Type="IDL:[cPrefix/]/[cModule/]/[cName/]:1.0"
		[comment Templates are laguaje specific, so container ImplLang is not modeled /]
		Container="[cContainerName/]" ImplLang="cpp"
		[comment Check when does this go/]
		Autostart="true" 
		Default="true" />
	[/for]
</Components>

[/file]
[/template]

[template public generateRTConfig(aCharacteristicComponent : CharacteristicComponent)
	{
		cName : String = aCharacteristicComponent.name;
		cModule : String = aCharacteristicComponent.module;
	}]
[comment This should change in the future, to allow differences to be specified/]
[for (Sequence{1..aCharacteristicComponent.componentNumber})]
[file (cName+'/test/CDB/alma/'+cName+i+'/'+cName+i+'.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="ISO-8859-1"?>
<[cName/] xmlns="urn:schemas-cosylab-com:[cName/]:1.0"
	xmlns:baci="urn:schemas-cosylab-com:BACI:1.0"
	xmlns:cdb="urn:schemas-cosylab-com:CDB:1.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	[for (it : Attribute | aCharacteristicComponent.attributes)]
	[comment value missing here/]
	[it.name/]="VALUE_HERE"[/for]>

	[for (it : Property | aCharacteristicComponent.properties)]
	<[it.name/]
		[for (it2 : Characteristic | it.characteristics)]
		[it2.name/]="[it2.value/]"
		[/for]
	/>
	[/for]

</[cName/]>

[/file]
[/for]

[/template]

[template public generateImplHead(aCharacteristicComponent : CharacteristicComponent)
	{
		cName : String = aCharacteristicComponent.name;
		cModule : String = aCharacteristicComponent.module;
	}]
[file (cName+'/include/'+cName+'_impl.h', false, 'UTF-8')]
#ifndef _[cName.toUpperCase()/]_IMPL_H_
#define _[cName.toUpperCase()/]_IMPL_H_

#include <[cName/]S.h>

#include <baciCharacteristicComponentImpl.h>
#include <baciSmartPropertyPointer.h>
#include <baciDevIO.h>
#include <acsThread.h>[comment Should this always be included??/]
[for (it : Property | aCharacteristicComponent.properties)]
#include <baci[it.baciType.name/]>
[/for]
[for (it : DevIO | aCharacteristicComponent.usedDevIOs.devIOs)]
#include <[it.name/]_devio.h>
[/for]

class [cName/]_thread;

class [cName/]_impl : public virtual POA_[cModule/]::[cName/], public baci::CharacteristicComponentImpl
{
	public:
		
		/*Constructor/Destructor*/
		[comment check arguments/]
		[cName/]_impl(const ACE_CString name, maci::ContainerServices * containerServices);
		virtual ~[cName/]_impl();
		
		/*Lifecycle methods*/
		virtual void initialize(void) throw (acsErrTypeLifeCycle::acsErrTypeLifeCycleExImpl);
		virtual void execute(void) throw (acsErrTypeLifeCycle::acsErrTypeLifeCycleExImpl);
		virtual void cleanUp(void);
		virtual void aboutToAbort(void);

		/*Properties*/
		[for (it : Property | aCharacteristicComponent.properties)]
		ACS::[it.baciType.name/]_ptr [it.name/]()
		[/for]

		/*Actions*/
		[for (it : Action | aCharacteristicComponent.actions)]
		[comment Add arguments /]
		[it.type/] [it.name/]();
		[/for]
	
	private:
		/*Smart Property Pointers*/
		[comment Using Tutorial's notation /]
		[for(it : Property | aCharacteristicComponent.properties)]
		baci::SmartPropertyPointer<baci::[it.baciType.name/]> m_[it.name/]_sp;
		[/for]

		/*DevIO read*/
		[for (it : Property | aCharacteristicComponent.properties)]
		[it.devIO.name/]::[it.devIO.name/]_read * [it.name/]_devio_m;[comment why m??/]
		[/for]
		
		/*DevIO write*/
		[for (it : Property | aCharacteristicComponent.properties)]
		[it.devIO.name/]::[it.devIO.name/]_write * [it.name/]_devio_w;
		[/for]

		/*DevIO variables*/
		
};

#endif //_[cName.toUpperCase()/]_IMPL_H_
[/file]
[/template]

[template public generateImpl(aCharacteristicComponent : CharacteristicComponent)
	{
		cName : String = aCharacteristicComponent.name;
		cModule : String = aCharacteristicComponent.module;
	}]
[file (cName+'/src/'+cName+'_impl.cpp', false, 'UTF-8')]
#include <[cName/]_impl.h>
[comment  include devio again?/]

/*Constructor*/
[cName/]_impl::[cName/]_impl(const ACE_CString name, maci::ContainerServices * containerServices):
	CharacteristicComponentImpl(name, containerServices),
	[for (it : Property | aCharacteristicComponent.properties) separator(',\n') after('\n')]
	m_[it.name/]_sp(this)[/for]
{
	[comment]
	Check this.
	Also check the other kind of property creation
	Also check logging and debugging messages
	[/comment]
	ACS_TRACE("::[cName/]::[cName/]");
}

/*Destructor*/
[comment Better left empty according to the tutorial/]
[cName/]::~[cName/]()
{
}

/*Lyfecycle methods override*/
void [cName/]::initialize() throw (acsErrTypeLifeCycle::acsErrTypeLifeCycleExImpl)
{
	[comment Maybe add comment here with suggested necessary resources /]
	
	//[protected ('User defined resource initialization')]
	
	//[/protected]
	
	//Property initialization
	[for (it : Property | aCharacteristicComponent.properties)]
	
	[it.name/]_devio_m = new [it.devIO.name/]::[it.devIO.name/]_read();
	[/for]

	[for (it : Property | aCharacteristicComponent.properties)]
	
	[it.name/]_devio_w = new [it.devIO.name/]::[it.devIO.name/]_write()
	[/for]
	[comment maybe get string from name/]
	[for (it : Property | aCharacteristicComponent.properties)]
	
	m_[it.name/]_sp = new baci::[it.baciType.name/](name+":[it.name/]", getComponent(), [it.name/]_devio_m);
	[/for]

	//[protected ('User initialization')]
	
	//[/protected]
}

void [cName/]::execute() throw (acsErrTypeLifeCycle::acsErrTypeLifeCycleExImpl)
{
	[comment Signals that the server must be ready after initialize/]
}

void [cName/]::cleanUp()
{
	[comment Should implement destruction/]
}

void [cName/]::aboutToAbort()
{
	[comment Should handle destruction in case of error/]
}

/*Properties implementation*/
[for (it : Property | aCharacteristicComponent.properties)]

ACS::[it.baciType.name/] [cName/]::[it.name/]()
{
	if(m_[it.name/]_sp == 0)
		return ACS::[it.baciType.name/]::_nil();
	ACS::[it.baciType.name/]_var prop = ACS::[it.baciType.name/]::_narrow(m_[it.name/]_sp->getCORBAReference());
	return prop._retn();
}
[/for]

/*Actions implementation*/
[for (it : Action | aCharacteristicComponent.actions)]
[comment Missing action parameters /]
[it.type/] [cName/]_impl::[it.name/]()
{
	//TBI by user
}
[/for]


/* --------------- ['['/] MACI DLL support functions [']'/] -----------------*/
#include <maciACSComponentDefines.h>
MACI_DLL_SUPPORT_FUNCTIONS([cName/]_impl)
/* ----------------------------------------------------------------*/
[/file]
[/template]

[template public generateMakefile(aCharacteristicComponent : CharacteristicComponent)
	{
		cName : String = aCharacteristicComponent.name;
		cModule : String = aCharacteristicComponent.module;
	}]
[comment]
Mostly copied from sensortag. Changed sensortagish things for [cName/]
Still must change DevIO specific things and maybe trim some other unnecessary parts.
[/comment]
[file (cName+'/src/Makefile', false, 'UTF-8')]
*******************************************************************************
# PPPPPPPP
#
# "@(#) $Id$"
#
# Makefile of ........
#
# who       when      what
# --------  --------  ----------------------------------------------
# [comment Add author (and some other metadata) data to the model???/]
#

# ALMA - Atacama Large Millimeter Array
# Copyright (c) ESO - European Southern Observatory, 2014
# (in the framework of the ALMA collaboration).
# All rights reserved.
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
#*******************************************************************************

#*******************************************************************************
# This Makefile follows ALMA/ACS Standards (see Makefile(5) for more).
#*******************************************************************************
# REMARKS
#    None
#------------------------------------------------------------------------

#
# user definable C-compilation flags
USER_CFLAGS = -std=c++11

#
# additional include and library search paths
#USER_INC = 
USER_LIB = -L/usr/local/lib
USER_LIB += -L/usr/local/lib64 [comment Just in case/]

#
# MODULE CODE DESCRIPTION:
# ------------------------
# As a general rule:  public file are "cleaned" and "installed"  
#                     local (_L) are not "installed".

#
# C programs (public and local)
# -----------------------------
EXECUTABLES     =
EXECUTABLES_L   = 

#
# <brief description of xxxxx program>
xxxxx_OBJECTS   =	
xxxxx_LDFLAGS   =
xxxxx_LIBS      =

#
# special compilation flags for single c sources
#yyyyy_CFLAGS   = 

#
# Includes (.h) files (public only)
# ---------------------------------
INCLUDES        = [cName/]_impl.h

#
# Libraries (public and local)
# ----------------------------
LIBRARIES       = [cName/]Impl
LIBRARIES_L     =

#
# <brief description of lllll library>
[cName/]Impl_OBJECTS = [cName/]_impl
[cName/]Impl_LIBS = [cName/]Stubs baciStubs ACE TAO TAO_PortableServer TAO_CosProperty maciErrType baselogging \
		ACSErrTypeCommon acscommonStubs acserrStubs acserr logging logging maci maciStubs loki \
		ACSErrTypeCORBA acscomponent baci loki paho-mqtt3c paho-mqttpp3 paho-mqtt3a paho-mqtt3as paho-mqtt3cs \
		mqttDevIO
		[comment Replace with mqtt stuff with current DevIO -- maybe put additional libs in the model/]

[comment Should there be one of these for each component instance??/]

#
# Scripts (public and local)
# ----------------------------
SCRIPTS         =
SCRIPTS_L       =

#
# TCL scripts (public and local)
# ------------------------------
TCL_SCRIPTS     =
TCL_SCRIPTS_L   =

#
# Python stuff (public and local)
# ----------------------------
PY_SCRIPTS         =
PY_SCRIPTS_L       =

PY_MODULES         =
PY_MODULES_L       =

PY_PACKAGES        =
PY_PACKAGES_L      =
pppppp_MODULES	   =

#
# <brief description of tttttt tcl-script>
tttttt_OBJECTS  =
tttttt_TCLSH    = 
tttttt_LIBS     = 

#
# TCL libraries (public and local)
# ------------------------------
TCL_LIBRARIES   =
TCL_LIBRARIES_L =

#
# <brief description of tttlll library>
tttlll_OBJECTS  = 

#
# Configuration Database Files
# ----------------------------
CDB_SCHEMAS = SensorTag 

# 
# IDL Files and flags
# 
IDL_FILES := sensortag
TAO_IDLFLAGS =
USER_IDL =

[cName/]Stubs_LIBS := baciStubs ACE TAO TAO_PortableServer TAO_CosProperty
#
# Jarfiles and their directories
#
JARFILES= 
jjj_DIRS=
jjj_EXTRAS=
# For expressing dependencies between jarfiles (parallel builds)
jjj_JLIBS= 
#
# java sources in Jarfile on/off
DEBUG= 
#
# ACS XmlIdl generation on/off
#
XML_IDL= 
#
# Java Component Helper Classes generation on/off
#
COMPONENT_HELPERS=
#
# Java Entity Classes generation on/off
#
XSDBIND=
#
# Schema Config files for the above
#
XSDBIND_INCLUDE=
# man pages to be done
# --------------------
MANSECTIONS =
MAN1 =
MAN3 =
MAN5 =
MAN7 =
MAN8 =

#
# local man pages
# ---------------
MANl =

#
# ASCII file to be converted into Framemaker-MIF
# --------------------
ASCII_TO_MIF = 

#
# other files to be installed
#----------------------------
INSTALL_FILES =

#
# list of all possible C-sources (used to create automatic dependencies)
# ------------------------------
CSOURCENAMES = \
	$(foreach exe, $(EXECUTABLES) $(EXECUTABLES_L), $($(exe)_OBJECTS)) \
	$(foreach rtos, $(RTAI_MODULES) , $($(rtos)_OBJECTS)) \
	$(foreach lib, $(LIBRARIES) $(LIBRARIES_L), $($(lib)_OBJECTS))

#
#>>>>> END OF standard rules

#
# INCLUDE STANDARDS
# -----------------

MAKEDIRTMP := $(shell searchFile include/acsMakefile)
ifneq ($(MAKEDIRTMP),\#error\#)
   MAKEDIR := $(MAKEDIRTMP)/include
   include $(MAKEDIR)/acsMakefile
endif

#
# TARGETS
# -------
all:	do_all
	@echo " . . . 'all' done" 

clean : clean_all 
	@echo " . . . clean done"

clean_dist : clean_all clean_dist_all 
	@echo " . . . clean_dist done"

man   : do_man 
	@echo " . . . man page(s) done"

install : install_all
	@echo " . . . installation done"


#___oOo___
[/file]
[/template]

[template public generateREADME(aCharacteristicComponent : CharacteristicComponent)]
	
[/template]